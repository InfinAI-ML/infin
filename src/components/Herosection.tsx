import React, { useEffect, useRef, useState } from 'react';

const HeroSection: React.FC = () => {
  const titleRef = useRef<HTMLHeadingElement>(null);
  const subtitleRef = useRef<HTMLParagraphElement>(null);
  const buttonRef = useRef<HTMLButtonElement>(null);
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });

  // Track mouse position for parallax effect
  useEffect(() => {
    const handleMouseMove = (e: MouseEvent) => {
      setMousePosition({
        x: e.clientX / window.innerWidth,
        y: e.clientY / window.innerHeight
      });
    };

    window.addEventListener('mousemove', handleMouseMove);
    return () => {
      window.removeEventListener('mousemove', handleMouseMove);
    };
  }, []);

  useEffect(() => {
    // Add animation to elements after component mounts
    const animateElements = () => {
      if (titleRef.current) {
        titleRef.current.classList.add('animate-in');
      }
      
      setTimeout(() => {
        if (subtitleRef.current) {
          subtitleRef.current.classList.add('animate-in');
        }
      }, 400);
      
      setTimeout(() => {
        if (buttonRef.current) {
          buttonRef.current.classList.add('animate-in');
        }
      }, 800);
    };
    
    // Short delay to ensure it runs after page load
    const timer = setTimeout(animateElements, 100);
    return () => clearTimeout(timer);
  }, []);

  return (
    <div className="relative h-screen flex items-center justify-center overflow-hidden bg-gradient-to-b from-black to-blue-900">
      {/* Neural network background */}
      <div className="absolute inset-0 z-0 opacity-50">
        <div 
          className="neural-network-bg"
          style={{
            transform: `translate(${(mousePosition.x - 0.5) * -20}px, ${(mousePosition.y - 0.5) * -20}px)`
          }}
        ></div>
      </div>
      
      {/* Enhanced particle system */}
      <div className="absolute inset-0 overflow-hidden z-0">
        <div className="particle-system">
          {Array.from({ length: 80 }).map((_, i) => {
            const pathType = i % 3; // Create 3 different path types
            const pathSize = 30 + Math.random() * 70;
            const speed = 5 + Math.random() * 10;
            return (
              <div 
                key={i} 
                className={`particle path-type-${pathType}`} 
                style={{
                  top: `${Math.random() * 100}%`,
                  left: `${Math.random() * 100}%`,
                  animationDelay: `${Math.random() * 8}s`,
                  animationDuration: `${speed}s`,
                  opacity: 0.2 + Math.random() * 0.4,
                  width: (i % 5 === 0) ? '3px' : '2px',
                  height: (i % 5 === 0) ? '3px' : '2px',
                  '--path-size': `${pathSize}px`,
                } as React.CSSProperties}
              ></div>
            );
          })}
        </div>
      </div>
      
      {/* Data stream effects */}
      <div className="absolute inset-0 overflow-hidden z-0">
        <div className="data-streams">
          {Array.from({ length: 15 }).map((_, i) => (
            <div 
              key={i} 
              className="data-stream" 
              style={{
                left: `${Math.random() * 100}%`,
                animationDelay: `${Math.random() * 4}s`,
                animationDuration: `${3 + Math.random() * 7}s`,
                height: `${30 + Math.random() * 70}%`,
                opacity: 0.1 + Math.random() * 0.3
              }}
            ></div>
          ))}
        </div>
      </div>
      
      {/* Neural nodes with connections */}
      <div className="absolute inset-0 z-0">
        <svg width="100%" height="100%" className="neural-connections">
          <defs>
            <radialGradient id="nodeGradient" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
              <stop offset="0%" stopColor="rgba(56, 189, 248, 0.8)" />
              <stop offset="100%" stopColor="rgba(59, 130, 246, 0)" />
            </radialGradient>
          </defs>
          {/* Dynamic SVG paths will be generated by CSS and JS */}
        </svg>
      </div>
      
      {/* Enhanced orbital brain structure */}
      <div 
        className="absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 w-96 h-96 z-0"
        style={{
          transform: `translate(-50%, -50%) rotate3d(${mousePosition.y}, ${mousePosition.x}, 0.5, ${Math.min(mousePosition.x * mousePosition.y * 30, 15)}deg)`
        }}
      >
        {/* Central core */}
        <div className="absolute w-32 h-32 left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 rounded-full bg-blue-400/10 pulse-glow"></div>
        
        {/* Primary orbits */}
        <div className="absolute w-48 h-48 left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 rounded-full border border-cyan-300/20 animate-spin-slow orbital-ring"></div>
        <div className="absolute w-64 h-64 left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 rounded-full border border-blue-300/15 animate-spin-reverse orbital-ring" style={{borderWidth: '2px'}}></div>
        <div className="absolute w-80 h-80 left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 rounded-full border border-indigo-300/10 animate-spin-slow-reverse orbital-ring" style={{borderWidth: '1px'}}></div>
        
        {/* Orbital nodes */}
        <div className="absolute w-4 h-4 rounded-full bg-cyan-400/80 glow-effect" style={{
          left: 'calc(50% + 4px)',
          top: 'calc(50% - 60px)',
          boxShadow: '0 0 15px rgba(34, 211, 238, 0.5), 0 0 30px rgba(34, 211, 238, 0.3)',
          animation: 'orbit1 10s linear infinite'
        }}></div>
        
        <div className="absolute w-3 h-3 rounded-full bg-blue-500/80 glow-effect" style={{
          left: 'calc(50% - 12px)',
          top: 'calc(50% + 80px)',
          boxShadow: '0 0 15px rgba(59, 130, 246, 0.5), 0 0 30px rgba(59, 130, 246, 0.3)',
          animation: 'orbit2 15s linear infinite'
        }}></div>
        
        <div className="absolute w-5 h-5 rounded-full bg-indigo-400/80 glow-effect" style={{
          left: 'calc(50% - 5px)',
          top: 'calc(50% - 5px)',
          boxShadow: '0 0 15px rgba(129, 140, 248, 0.5), 0 0 30px rgba(129, 140, 248, 0.3)',
          animation: 'orbit3 12s linear infinite'
        }}></div>
        
        {/* Neural leafs - multiple rotating in different orbital paths */}
        <div className="leaf-orbit" style={{animation: 'leafOrbit1 20s linear infinite'}}>
          <svg className="w-12 h-6 neural-leaf" viewBox="0 0 50 30" style={{animation: 'leafRotate3D 8s ease-in-out infinite'}}>
            <path 
              d="M25,5 C15,0 5,25 15,25 C25,25 35,0 25,5 Z" 
              fill="none" 
              stroke="#5EEAD4" 
              strokeWidth="2"
              className="leaf-pulse" 
            />
          </svg>
        </div>
        
        <div className="leaf-orbit" style={{animation: 'leafOrbit2 25s linear infinite reverse'}}>
          <svg className="w-10 h-5 neural-leaf" viewBox="0 0 50 30" style={{animation: 'leafRotate3D 10s ease-in-out infinite 2s'}}>
            <path 
              d="M25,5 C15,0 5,25 15,25 C25,25 35,0 25,5 Z" 
              fill="none" 
              stroke="#38BDF8" 
              strokeWidth="1.5"
              className="leaf-pulse" 
            />
          </svg>
        </div>
        
        <div className="leaf-orbit" style={{animation: 'leafOrbit3 18s linear infinite'}}>
          <svg className="w-14 h-7 neural-leaf" viewBox="0 0 50 30" style={{animation: 'leafRotate3D 7s ease-in-out infinite 1s'}}>
            <path 
              d="M25,5 C15,0 5,25 15,25 C25,25 35,0 25,5 Z" 
              fill="none" 
              stroke="#818CF8" 
              strokeWidth="1.7"
              className="leaf-pulse" 
            />
          </svg>
        </div>
      </div>
      
      {/* Animated hexagon shapes floating in the background */}
      <div className="absolute inset-0 overflow-hidden z-0">
        <div className="hex-container">
          {Array.from({ length: 8 }).map((_, i) => (
            <div 
              key={i} 
              className="hexagon" 
              style={{
                top: `${Math.random() * 100}%`,
                left: `${Math.random() * 100}%`,
                animationDelay: `${Math.random() * 10}s`,
                animationDuration: `${20 + Math.random() * 30}s`,
                opacity: 0.05 + Math.random() * 0.15,
                transform: `scale(${0.5 + Math.random() * 1.5}) rotate(${Math.random() * 360}deg)`
              }}
            ></div>
          ))}
        </div>
      </div>
      
      {/* Content - styled to match dark AI theme */}
      <div 
        className="container mx-auto px-6 z-10 text-center"
        // style={{
        //   transform: `translate(${(mousePosition.x - 0.5) * 10}px, ${(mousePosition.y - 0.5) * 10}px)`
        // }}
      >
        <h1 
          ref={titleRef}
          className="text-5xl md:text-6xl font-bold mb-8 opacity-0 transition-all duration-700 translate-y-4 text-white"
        >
          <span className="relative inline-block">
            Infin<span className="text-transparent bg-clip-text bg-gradient-to-r from-cyan-400 to-blue-500">A</span><span className="text-white">I</span>
            <span className="inline-block ml-1 mt-1">
              <svg className="w-12 h-6 inline-block" viewBox="0 0 50 30">
                <path 
                  d="M25,5 C15,0 5,25 15,25 C25,25 35,0 25,5 Z" 
                  fill="none" 
                  stroke="#5EEAD4" 
                  strokeWidth="2"
                  className="animate-pulse-slow" 
                />
              </svg>
            </span>
          </span>
        </h1>
        
        <p 
          ref={subtitleRef}
          className="text-xl md:text-2xl mb-10 max-w-3xl mx-auto text-blue-50/90 opacity-0 transition-all duration-700 translate-y-4"
        >
          A student-driven community at IIT Madras BS, exploring the
          <span className="text-cyan-300"> frontiers of AI/ML </span>
          and its real-world applications.
        </p>
        
        {/* Cyberpunk style button */}
        <button 
          ref={buttonRef}
          className="cyberpunk-button opacity-0 translate-y-4 relative py-4 px-10 text-lg font-bold text-white overflow-hidden transition-all duration-500 group"
          onClick={() => window.open('https://discord.gg/zpbTxz49', '_blank')}
        >
          <span className="relative z-10 group-hover:text-cyan-200 transition-colors duration-300 flex items-center justify-center">
            Join Our Community
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 ml-2 inline-block group-hover:translate-x-1 transition-all" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14 5l7 7m0 0l-7 7m7-7H3" />
            </svg>
          </span>
          <span className="cyber-glow absolute inset-0 z-0"></span>
          <span className="cyber-glitch absolute inset-0 z-0 opacity-0 group-hover:opacity-100"></span>
          <span className="cyber-corners"></span>
        </button>
        
        {/* Binary data stream at the bottom */}
        <div className="absolute left-0 right-0 bottom-12 flex justify-center opacity-40 overflow-hidden h-8">
          <div className="binary-stream">01001001 01101110 01100110 01101001 01101110 01000001 01001001 00100000</div>
        </div>
      </div>
      
      {/* Add custom styles for animations */}
      <style jsx>{`
        /* Base style resets and fundamentals */
        * {
          box-sizing: border-box;
        }
        
        /* Neural network background */
        .neural-network-bg {
          position: absolute;
          width: 100%;
          height: 100%;
          background-image: 
            linear-gradient(rgba(0, 0, 0, 0.9) 1px, transparent 1px),
            linear-gradient(90deg, rgba(0, 0, 0, 0.9) 1px, transparent 1px);
          background-size: 60px 60px;
          background-position: center center;
          perspective: 1000px;
          transition: transform 0.2s ease-out;
        }
        
        /* Enhanced particle system */
        .particle-system {
          position: absolute;
          width: 100%;
          height: 100%;
          overflow: hidden;
        }
        
        .particle {
          position: absolute;
          width: 2px;
          height: 2px;
          background: #38BDF8;
          border-radius: 50%;
          box-shadow: 0 0 4px #38BDF8;
          opacity: 0.3;
          will-change: transform;
        }
        
        /* Different path animations for particle movement */
        .path-type-0 {
          animation: particle-path-sine linear infinite;
        }
        
        .path-type-1 {
          animation: particle-path-curve linear infinite;
        }
        
        .path-type-2 {
          animation: particle-path-zigzag linear infinite;
        }
        
        @keyframes particle-path-sine {
          0% {
            transform: translateY(0) translateX(0);
            opacity: 0;
          }
          10% {
            opacity: 0.7;
          }
          90% {
            opacity: 0.3;
          }
          100% {
            transform: translateY(-100vh) translateX(calc(sin(var(--path-size)) * 40px));
            opacity: 0;
          }
        }
        
        @keyframes particle-path-curve {
          0% {
            transform: translateY(0) translateX(0) scale(1);
            opacity: 0;
          }
          10% {
            opacity: 0.8;
            transform: translateY(-10vh) translateX(20px) scale(1);
          }
          50% {
            transform: translateY(-50vh) translateX(-40px) scale(0.8);
          }
          90% {
            opacity: 0.3;
          }
          100% {
            transform: translateY(-100vh) translateX(10px) scale(0.5);
            opacity: 0;
          }
        }
        
        @keyframes particle-path-zigzag {
          0% {
            transform: translateY(0) translateX(0);
            opacity: 0;
          }
          20% {
            transform: translateY(-20vh) translateX(20px);
            opacity: 0.7;
          }
          40% {
            transform: translateY(-40vh) translateX(-20px);
          }
          60% {
            transform: translateY(-60vh) translateX(20px);
          }
          80% {
            transform: translateY(-80vh) translateX(-20px);
            opacity: 0.3;
          }
          100% {
            transform: translateY(-100vh) translateX(0);
            opacity: 0;
          }
        }

        /* Data streams */
        .data-streams {
          position: absolute;
          width: 100%;
          height: 100%;
          overflow: hidden;
        }
        
        .data-stream {
          position: absolute;
          width: 1px;
          top: 0;
          background: linear-gradient(to bottom, 
                      rgba(56, 189, 248, 0) 0%,
                      rgba(56, 189, 248, 0.5) 50%,
                      rgba(56, 189, 248, 0) 100%);
          animation: data-flow linear infinite;
        }
        
        @keyframes data-flow {
          0% {
            transform: translateY(-100%);
          }
          100% {
            transform: translateY(100%);
          }
        }
        
        /* Neural leafs animations */
        .leaf-orbit {
          position: absolute;
          width: 20px;
          height: 20px;
          left: 50%;
          top: 50%;
          transform-style: preserve-3d;
          transform-origin: 0 0;
        }
        
        .neural-leaf {
          position: absolute;
          transform-style: preserve-3d;
          will-change: transform;
        }
        
        @keyframes leafOrbit1 {
          0% { transform: rotate(0deg) translateX(80px) rotate(0deg); }
          100% { transform: rotate(360deg) translateX(80px) rotate(-360deg); }
        }
        
        @keyframes leafOrbit2 {
          0% { transform: rotate(120deg) translateX(110px) rotate(-120deg); }
          100% { transform: rotate(480deg) translateX(110px) rotate(-480deg); }
        }
        
        @keyframes leafOrbit3 {
          0% { transform: rotate(240deg) translateX(140px) rotate(-240deg); }
          100% { transform: rotate(600deg) translateX(140px) rotate(-600deg); }
        }
        
        @keyframes leafRotate3D {
          0% { transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg); }
          25% { transform: rotateX(60deg) rotateY(20deg) rotateZ(10deg); }
          50% { transform: rotateX(0deg) rotateY(60deg) rotateZ(20deg); }
          75% { transform: rotateX(-40deg) rotateY(20deg) rotateZ(10deg); }
          100% { transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg); }
        }
        
        .leaf-pulse {
          animation: leafColorPulse 4s ease-in-out infinite;
        }
        
        @keyframes leafColorPulse {
          0%, 100% { stroke-width: 1.5; stroke-opacity: 0.7; }
          50% { stroke-width: 2.5; stroke-opacity: 1; }
        }
        
        /* Orbital animations */
        .orbital-ring {
          transform-style: preserve-3d;
          box-shadow: 0 0 15px rgba(56, 189, 248, 0.15);
        }
        
        .animate-spin-slow {
          animation: spin 20s linear infinite;
        }
        
        .animate-spin-reverse {
          animation: spin 25s linear infinite reverse;
        }
        
        .animate-spin-slow-reverse {
          animation: spin 30s linear infinite reverse;
        }
        
        @keyframes spin {
          from { transform: translate(-50%, -50%) rotate(0deg); }
          to { transform: translate(-50%, -50%) rotate(360deg); }
        }
        
        /* Glowing elements */
        .glow-effect {
          animation: glow 3s ease-in-out infinite alternate;
        }
        
        @keyframes glow {
          0% { opacity: 0.7; }
          100% { opacity: 1; }
        }
        
        .pulse-glow {
          animation: pulseCore 4s ease-in-out infinite;
        }
        
        @keyframes pulseCore {
          0%, 100% { 
            opacity: 0.6; 
            box-shadow: 0 0 20px rgba(56, 189, 248, 0.3),
                       0 0 40px rgba(56, 189, 248, 0.1);
          }
          50% { 
            opacity: 0.9; 
            box-shadow: 0 0 30px rgba(56, 189, 248, 0.5),
                       0 0 60px rgba(56, 189, 248, 0.2);
          }
        }
        
        /* Orbital path animations */
        @keyframes orbit1 {
          0% { transform: rotate(0deg) translateX(60px) rotate(0deg); }
          100% { transform: rotate(360deg) translateX(60px) rotate(-360deg); }
        }
        
        @keyframes orbit2 {
          0% { transform: rotate(120deg) translateX(80px) rotate(-120deg); }
          100% { transform: rotate(480deg) translateX(80px) rotate(-480deg); }
        }
        
        @keyframes orbit3 {
          0% { transform: rotate(240deg) translateX(100px) rotate(-240deg); }
          100% { transform: rotate(600deg) translateX(100px) rotate(-600deg); }
        }
        
        /* Hexagon floating elements */
        .hex-container {
          position: absolute;
          width: 100%;
          height: 100%;
          overflow: hidden;
        }
        
        .hexagon {
          position: absolute;
          width: 120px;
          height: 104px;
          background: linear-gradient(135deg, rgba(56, 189, 248, 0.1) 0%, rgba(129, 140, 248, 0.1) 100%);
          clip-path: polygon(50% 0%, 100% 25%, 100% 75%, 50% 100%, 0% 75%, 0% 25%);
          animation: float-hex linear infinite;
        }
        
        @keyframes float-hex {
          0% {
            transform: translate(0, 0) rotate(0deg) scale(1);
          }
          33% {
            transform: translate(50px, -30px) rotate(120deg) scale(1.1);
          }
          66% {
            transform: translate(-30px, 50px) rotate(240deg) scale(0.9);
          }
          100% {
            transform: translate(0, 0) rotate(360deg) scale(1);
          }
        }
        
        /* Animation for content entrance */
        .animate-in {
          opacity: 1 !important;
          transform: translateY(0) !important;
        }
        
        /* Cyberpunk button style */
        .cyberpunk-button {
          background: linear-gradient(45deg, #000 0%, #081d2c 100%);
          border: 1px solid #38BDF8;
          box-shadow: 0 0 10px rgba(56, 189, 248, 0.4),
                      inset 0 0 5px rgba(56, 189, 248, 0.2);
          clip-path: polygon(
            0% 15%, 15% 0%, 85% 0%, 100% 15%, 
            100% 85%, 85% 100%, 15% 100%, 0% 85%
          );
          transition: all 0.3s cubic-bezier(0.23, 1, 0.32, 1);
        }
        
        .cyberpunk-button:hover {
          transform: translateY(0) scale(1.05);
          box-shadow: 0 0 20px rgba(56, 189, 248, 0.6),
                      0 0 40px rgba(56, 189, 248, 0.3),
                      inset 0 0 5px rgba(56, 189, 248, 0.3);
        }
        
        .cyberpunk-button:active {
          transform: translateY(2px) scale(1);
          box-shadow: 0 0 10px rgba(56, 189, 248, 0.4),
                      inset 0 0 5px rgba(56, 189, 248, 0.2);
        }
        
        .cyber-glow {
          background: linear-gradient(45deg, 
            rgba(56, 189, 248, 0.1) 0%, 
            rgba(14, 165, 233, 0.1) 30%, 
            rgba(56, 189, 248, 0.1) 70%, 
            rgba(12, 74, 110, 0.1) 100%);
          filter: blur(5px);
          transition: opacity 0.3s;
        }
        
        .cyber-glitch {
          background-image: 
            linear-gradient(90deg, rgba(56, 189, 248, 0.15) 1px, transparent 1px),
            linear-gradient(rgba(56, 189, 248, 0.15) 1px, transparent 1px);
          background-size: 6px 6px;
          transition: opacity 0.3s;
          animation: glitch 0.2s ease-in-out infinite alternate;
        }
        
        @keyframes glitch {
          0% { background-position: 0 0; }
          20% { background-position: -1px 1px; }
          40% { background-position: 1px 2px; }
          60% { background-position: 2px -2px; }
          80% { background-position: -2px -1px; }
          100% { background-position: 1px 1px; }
        }
        
        /* Binary data stream */
        .binary-stream {
          font-family: monospace;
          font-size: 12px;
          color: rgba(56, 189, 248, 0.7);
          white-space: nowrap;
          animation: binary-flow 20s linear infinite;
        }
        
        @keyframes binary-flow {
          0% { transform: translateX(100%); }
          100% { transform: translateX(-100%); }
        }
      `}</style>
    </div>
  );
};

export default HeroSection;